<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	         http://www.springframework.org/schema/beans/spring-beans.xsd
	         http://www.springframework.org/schema/tx   
	         http://www.springframework.org/schema/tx/spring-tx.xsd
	         http://www.springframework.org/schema/context
	         http://www.springframework.org/schema/context/spring-context.xsd
	         http://www.springframework.org/schema/cache
	         http://www.springframework.org/schema/cache/spring-cache.xsd
	         http://www.springframework.org/schema/task 
	         http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 自动扫描的包名 -->
    <context:component-scan base-package="com.shishuo.cms">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <tx:annotation-driven/>

    <task:annotation-driven/>

    <!-- 在XML配置文件中加入外部属性文件，当然也可以指定外部文件的编码 -->
    <bean id="propertyConfigurer" class="com.shishuo.cms.util.PropertyUtils">
        <property name="locations">
            <list>
                <value>classpath:shishuocms.properties</value> <!-- 指定外部文件的编码 -->
            </list>
        </property>
    </bean>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <property name="dbType" value = "mysql" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="5" />
        <property name="minIdle" value="5" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 防御SQL注入攻击wall  -->
        <property name="filters" value="wall"/>

    </bean>

    <!-- 创建SqlSessionFactory，同时指定数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.shishuo.cms.service.*.*(..))"/>
    </aop:config>

    <!--创建数据映射器，数据映射器必须为接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
        <property name="basePackage" value="com.shishuo.cms.dao"/>
    </bean>


    <!-- ehcahce缓存配置 -->
    <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
    </bean>
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcache"/>
    </bean>
    <!-- 启用缓存注解开关 -->
    <cache:annotation-driven cache-manager="cacheManager"/>

    <!-- shiro配置-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <!--<property name="loginUrl" value="/admin/login.htm" />-->
        <!--<property name="unauthorizedUrl" value="/refuse.htm" />-->
        <property name="unauthorizedUrl" value="/admin/login.htm" />
        <property name="filters">
            <map>
                <entry key="authc" value-ref="adminFormAuthenticationFilter" />
                <entry key="logout" value-ref="logoutFilter" />
                <entry key="userLogout" value-ref="userLogout" />
                <entry key="userAuthc" value-ref="userFormAuthenticationFilter" />
                <entry key="userl" value-ref="userFilter" />
                <entry key="roles">
                    <bean class="com.shishuo.cms.shiro.CustomRolesAuthorizationFilter"/>
                </entry>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /admin/login.json = authc
                /admin/login.htm = anon
                /admin/logout.htm = logout,roles[admin]
                /manage/** = authc,roles[admin]

                /user/login.json = userAuthc
                /user/logout.htm = userLogout,roles[user]
                /user/update.htm = userAuthc,roles[user]
                /user/update.json = userAuthc,roles[user]

                /paper/thinkTtank.htm = userl
                /paper/thinkTtank.json = userl
                /paper/download/*.htm = userl

                /** = anon

            </value>
        </property>
    </bean>


    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="authenticator" ref="authenticator"/>
        <property name="realms">
            <list>
                <ref bean="adminRealm"/>
                <ref bean="userRealm" />
            </list>
        </property>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <bean id="authenticator" class="com.shishuo.cms.shiro.CustomizedModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>

    <!-- 自定义 realm -->
    <bean id="userRealm" class="com.shishuo.cms.shiro.UserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher" />
        <property name="cachingEnabled" value="false"/>
    </bean>
    <bean id="adminRealm" class="com.shishuo.cms.shiro.AdminRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher" />
        <property name="cachingEnabled" value="false"/>
    </bean>

    <bean id="userFilter" class="org.apache.shiro.web.filter.authc.UserFilter">
        <property name="loginUrl" value="/user/toLogin.htm"/>
    </bean>

    <!-- 基于Form表单的身份验证过滤器，不配置将也会注册此过虑器，表单中的用户账号、密码及loginurl将采用默认值，建议配置 -->
    <bean id="adminFormAuthenticationFilter"
          class="com.shishuo.cms.shiro.AdminFormAuthenticationFilter">
        <property name="usernameParam" value="name" />
        <property name="passwordParam" value="password" />
        <property name="loginUrl" value="/admin/login.htm" />
        <property name="readLoginUrl" value="/admin/login.json" />
    </bean>

    <bean id="userFormAuthenticationFilter"
          class="com.shishuo.cms.shiro.UserFormAuthenticationFilter">
        <property name="usernameParam" value="name" />
        <property name="passwordParam" value="password" />
        <property name="rememberMeParam" value="rememberMe"/>
        <property name="loginUrl" value="/user/toLogin.htm" />
        <property name="readLoginUrl" value="/user/login.json" />
        <property name="successUrl" value="/index.htm" />
    </bean>

    <bean id="credentialsMatcher"
          class="com.shishuo.cms.shiro.CustomizedHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
        <property name="hashAlgorithmName" value="MD5" />
        <property name="hashIterations" value="1" />
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/admin/login.htm" />
    </bean>

    <bean id="userLogout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/index.htm" />
    </bean>

    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="rememberMeCookie" />
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe" />
        <property name="httpOnly" value="true" />
        <property name="maxAge" value="${cookie.maxAge}" />
    </bean>
</beans>
